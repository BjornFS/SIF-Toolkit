import os
import re
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

def extract_positions_and_sums(directory):
    files = [f for f in os.listdir(directory) if f.endswith('.csv')]
    
    positions = []
    pixels = []
    
    pattern = re.compile(r'_(\d+)_([0-9.]+)_([0-9.]+)_')
    
    for file in files:
        match = pattern.search(file)
        if match:
            image_index, x_pos, y_pos = match.groups()
            positions.append((int(image_index), float(x_pos), float(y_pos)))
            
            data = pd.read_csv(os.path.join(directory, file))
            counts = data['counts'].values  # Assuming the column with counts is named 'counts'
            pixels.append(np.sum(counts))
    
    return positions, pixels

def normalize_array(array):
    array_min = np.min(array)
    array_max = np.max(array)
    
    if array_max - array_min == 0:
        return np.zeros_like(array)
    
    normalized_array = (array - array_min) / (array_max - array_min)
    return normalized_array

def plot_heatmap(directory, colorscheme='Blues'):
    positions, pixels = extract_positions_and_sums(directory)
    
    # Normalize the pixel values
    normalized_pixels = normalize_array(np.array(pixels))
    
    # Create a dictionary to hold the normalized pixel values by position
    counts_by_position = {(x, y): pixel for (_, x, y), pixel in zip(positions, normalized_pixels)}
    
    # Determine the grid size
    max_x = int(max(x for (_, x, y) in positions)) + 1
    max_y = int(max(y for (_, x, y) in positions)) + 1
    heatmap_data = np.zeros((max_y, max_x))
    
    # Fill the heatmap data based on the positions
    for (x, y), count in counts_by_position.items():
        heatmap_data[int(y), int(x)] = count
    
    # Plot the heatmap
    plt.figure(figsize=(10, 10))
    plt.imshow(heatmap_data, cmap=colorscheme, aspect='auto')
    plt.colorbar(label='Normalized Counts')
    plt.xlabel('X Position')
    plt.ylabel('Y Position')
    plt.title('Heatmap of PL Data')
    plt.show()

# Example usage
directory = 'desktop/SHG_mapping/'
plot_heatmap(directory, colorscheme='Blues')
